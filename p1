

SushiBar initialized the program with some settings-variables and creating a log file. Threads are created and started. 
The door creates customers in random intervals as long as it is open and the waitingarea is not full.
Waitresses wait for the door to notify entering customers.
Waitresses notify changes in the waitingarea when fetching customers.
Waitress and door are runnable threads where we use synchronized blocks to handle to monitor implementation.
Only one thread was allowed to make changes in the WaitingArea object. The door was only allowed to enter new people if there were space in the queue, and the waitresses were only allowed to get the next customer in the queue if there actually were anyone in the queue.

Wait(): thread waits for notify()/notifyAll()
Notify(): wakes up single thread from wait()
NotifyAll(): wakes up all threads from wait() (can forexample use this for multiple waitresses)

The variable queue in WaitingArea is a shared variable, and can be accessed through both Waitress and Door.The solution to managing the shared object is to put a monitor lock on the object. That way only one thread at once can access it.

The method printClosedShop in SushiBar writes out all the statistics. Since we used join() on the threads, they will "die out" naturally before the statistics are written.
